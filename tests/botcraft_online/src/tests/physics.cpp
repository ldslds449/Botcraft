#include "TestManager.hpp"
#include "Utils.hpp"

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include <botcraft/Game/Entities/LocalPlayer.hpp>
#include <botcraft/Utilities/SleepUtilities.hpp>

using namespace Botcraft;

// Physics tests requiring tick-precision accuracy are marked as mayfail
// as they can potentially break because of bad thread timing
// They also don't run by default, and need the [physics] tag to
// be set in the command line

TEST_CASE("fall on", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    int offset_z = 0;
    bool crouch = false;
    std::vector<double> target_pos_y;
    std::vector<double> target_speed_y;
    SECTION("concrete")
    {
        offset_z = 0;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 1.0
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.0784000015258789
        };
    }

    SECTION("wall")
    {
        offset_z = 2;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 1.5
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.0784000015258789
        };
    }

    SECTION("soul_sand")
    {
        offset_z = 4;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 0.9366549461529914, 0.875
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.7811331932098841, -0.0784000015258789
        };
    }

    SECTION("slime")
    {
        offset_z = 6;
        SECTION("stand")
        {
            crouch = false;
            target_pos_y = {
                5.0, 4.921599998474121, 4.766367993957519,
                4.535840625044555, 4.231523797587011, 3.8548932993483556,
                3.407395402364938, 2.8904474532599647, 2.305438451751212,
                1.6537296175885947, 1.0,

                1.6243331901581266, 2.1577797268954217, 2.6021573415467776,
                2.959247410855058, 3.2307956840622465, 3.4185129954587845,
                3.5240759626819367, 3.5491276710482005, 3.4952783441990833,
                3.364106001333975,3.1571571012983766, 2.875947173790374,
                2.5219614379429984,2.09665540853495, 1.6014554900771145,
                1.0377595590173678, 1.0
            };
            target_speed_y = {
                -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
                -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
                -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
                -0.7170746714356033, 0.6243331901581264,

                0.5334465367372956, 0.444377614651356, 0.3570900693082803,
                0.27154827320718833, 0.1877173113965379, 0.10556296722315182,
                0.025051708366263692, -0.05384932684911707, -0.13117234286510804,
                -0.20694890003559868, -0.28120992750800267, -0.35398573584737525,
                -0.42530602940804874, -0.49519991845783534, -0.5636959310597465,
                -0.6308220247160771, 0.539805594727852
            };
        }
        SECTION("crouch")
        {
            crouch = true;
            target_pos_y = {
                5.0, 4.921599998474121, 4.766367993957519,
                4.535840625044555, 4.231523797587011, 3.8548932993483556,
                3.407395402364938, 2.8904474532599647, 2.305438451751212,
                1.6537296175885947, 1.0
            };
            target_speed_y = {
                -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
                -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
                -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
                -0.7170746714356033, -0.0784000015258789
            };
        }
    }

    SECTION("cobweb")
    {
        offset_z = 8;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 0.9366549461529914, 0.8975982859105076,
            0.8936782857758012, 0.8897582856410948, 0.8858382855063884,
            0.881918285371682, 0.8779982852369757
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.7811331932098841, -0.0784000015258789,
            -0.0784000015258789, -0.0784000015258789, -0.0784000015258789,
            -0.0784000015258789, -0.0784000015258789
        };
    }

    SECTION("cauldron")
    {
        offset_z = 10;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 0.9366549461529914, 0.25
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.7811331932098841, -0.0784000015258789
        };
    }

    SECTION("hopper")
    {
        offset_z = 12;
        crouch = false;
        target_pos_y = {
            5.0, 4.921599998474121, 4.766367993957519,
            4.535840625044555, 4.231523797587011, 3.8548932993483556,
            3.407395402364938, 2.8904474532599647, 2.305438451751212,
            1.6537296175885947, 0.9366549461529914, 0.6875
        };
        target_speed_y = {
            -0.0784000015258789, -0.1552320045166016, -0.230527368912964,
            -0.30431682745754424, -0.37663049823865513, -0.44749789698341763,
            -0.5169479491049732, -0.5850090015087522, -0.6517088341626173,
            -0.7170746714356033, -0.7811331932098841, -0.0784000015258789
        };
    }

    for (size_t i = 0; i < target_pos_y.size(); ++i)
    {
        target_pos_y[i] += test_offset.y;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(0.0, 5.0, offset_z));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();
    std::shared_ptr<World> world = bot->GetWorld();

    const Position drop_block_position(test_offset.x, test_offset.y + 4, test_offset.z + offset_z);
    MinecraftServer::GetInstance().SendLine(
        "setblock " +
        std::to_string(drop_block_position.x) + " " +
        std::to_string(drop_block_position.y) + " " +
        std::to_string(drop_block_position.z) + " " +
        "minecraft:air"
#if PROTOCOL_VERSION > 340 /* > 1.12.2 */
        + " replace"
#endif
    );

    // Wait for the block to be removed from the local world
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            const Blockstate* block = world->GetBlock(drop_block_position);
            return block != nullptr && block->IsAir();
        }, 5000));

    for (size_t i = 0; i < target_pos_y.size(); ++i)
    {
        local_player->SetInputsSneak(crouch);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        const float position = local_player->GetY();
        const float speed = local_player->GetSpeedY();
        // If physics ticked between when we detected the block was air and now, we might have skipped the first tick(s)
        if (i == 0 && position < target_pos_y[0] - 1e-3)
        {
            while (i < target_pos_y.size() && std::abs(position - target_pos_y[i]) > 1e-3)
            {
                i += 1;
            }
            INFO("Tick " << 0);
            INFO("Position " << position << " | Target: " << target_pos_y[0]);
            INFO("Speed " << speed << " | Target: " << target_speed_y[0]);
            REQUIRE(i < target_pos_y.size());
        }
        INFO("Tick " << i);
        INFO("Position " << position << " | Target: " << target_pos_y[i]);
        INFO("Speed " << speed << " | Target: " << target_speed_y[i]);
        REQUIRE_THAT(target_pos_y[i] - position, Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(target_speed_y[i] - speed, Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on concrete", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.5980000033676625 }, { 2.5, 1.0, 2.749508014789164 },
            { 2.5, 1.0, 2.930231402001505 }, { 2.5, 1.0, 3.1269063862484643 }, { 2.5, 1.0, 3.3322909434879637 },
            { 2.5, 1.0, 3.542430928133747 }, { 2.5, 1.0, 3.7551673764449465 }, { 2.5, 1.0, 3.969321494082129 },
            { 2.5, 1.0, 4.184249659261207 }, { 2.5, 1.0, 4.399600454447249 }, { 2.5, 1.0, 4.517182002276234 },
            { 2.5, 1.0, 4.581381534847804 }, { 2.5, 1.0, 4.616434483703372 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.053508008053839436 },
            { 0.0, -0.0784000015258789, 0.08272338384467842 }, { 0.0, -0.0784000015258789, 0.09867498087929642 },
            { 0.0, -0.0784000015258789, 0.10738455387183765 }, { 0.0, -0.0784000015258789, 0.11213998127812054 },
            { 0.0, -0.0784000015258789, 0.11473644494353707 }, { 0.0, -0.0784000015258789, 0.11615411426952052 },
            { 0.0, -0.0784000015258789, 0.11692816181141515 }, { 0.0, -0.0784000015258789, 0.11735079181837918 },
            { 0.0, -0.0784000015258789, 0.11758154782898447 }, { 0.0, -0.0784000015258789, 0.06419953257156992 },
            { 0.0, -0.0784000015258789, 0.03505294885556929 }, { 0.0, -0.0784000015258789, 0.019138912298175784 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.4019999966323375 }, { 2.5, 1.0, 2.250491985210836 },
            { 2.5, 1.0, 2.069768597998495 }, { 2.5, 1.0, 1.8730936137515357 }, { 2.5, 1.0, 1.6677090565120363 },
            { 2.5, 1.0, 1.4575690718662528 }, { 2.5, 1.0, 1.2448326235550535 }, { 2.5, 1.0, 1.0306785059178711 },
            { 2.5, 1.0, 0.8157503407387932 }, { 2.5, 1.0, 0.6003995455527509 }, { 2.5, 1.0, 0.48281799772376566 },
            { 2.5, 1.0, 0.41861846515219625 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.053508008053839436 },
            { 0.0, -0.0784000015258789, -0.08272338384467842 }, { 0.0, -0.0784000015258789, -0.09867498087929642 },
            { 0.0, -0.0784000015258789, -0.10738455387183765 }, { 0.0, -0.0784000015258789, -0.11213998127812054 },
            { 0.0, -0.0784000015258789, -0.11473644494353707 }, { 0.0, -0.0784000015258789, -0.11615411426952052 },
            { 0.0, -0.0784000015258789, -0.11692816181141515 }, { 0.0, -0.0784000015258789, -0.11735079181837918 },
            { 0.0, -0.0784000015258789, -0.11758154782898447 }, { 0.0, -0.0784000015258789, -0.06419953257156992 },
            { 0.0, -0.0784000015258789, -0.03505294885556929 }
        };
    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4019999966323375, 1.0, 2.5 }, { 2.250491985210836, 1.0, 2.5 },
            { 2.069768597998495, 1.0, 2.5 }, { 1.8730936137515357, 1.0, 2.5 }, { 1.6677090565120354, 1.0, 2.5 },
            { 1.4575690718662528, 1.0, 2.5 }, { 1.2448326235550535, 1.0, 2.5 }, { 1.0306785059178702, 1.0, 2.5 },
            { 0.8157503407387927, 1.0, 2.5 }, { 0.6983995489204133, 1.0, 2.5 }, { 0.6343260091452683, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.053508008053839436, -0.0784000015258789, 0.0 },
            { -0.08272338384467842, -0.0784000015258789, 0.0 }, { -0.09867498087929642, -0.0784000015258789, 0.0 },
            { -0.10738455387183765, -0.0784000015258789, 0.0 }, { -0.11213998127812054, -0.0784000015258789, 0.0 },
            { -0.11473644494353707, -0.0784000015258789, 0.0 }, { -0.11615411426952052, -0.0784000015258789, 0.0 },
            { -0.11692816181141515, -0.0784000015258789, 0.0 }, { -0.11735079181837918, -0.0784000015258789, 0.0 },
            { -0.06407353977514504, -0.0784000015258789, 0.0 }, { -0.03498415678073093, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5980000033676625, 1.0, 2.5 }, { 2.749508014789164, 1.0, 2.5 },
            { 2.930231402001505, 1.0, 2.5 }, { 3.1269063862484643, 1.0, 2.5 }, { 3.3322909434879646, 1.0, 2.5 },
            { 3.542430928133747, 1.0, 2.5 }, { 3.7551673764449465, 1.0, 2.5 }, { 3.9693214940821298, 1.0, 2.5 },
            { 4.184249659261208, 1.0, 2.5 }, { 4.301600451079587, 1.0, 2.5 }, { 4.365673990854732, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.053508008053839436, -0.0784000015258789, 0.0 },
            { 0.08272338384467842, -0.0784000015258789, 0.0 }, { 0.09867498087929642, -0.0784000015258789, 0.0 },
            { 0.10738455387183765, -0.0784000015258789, 0.0 }, { 0.11213998127812054, -0.0784000015258789, 0.0 },
            { 0.11473644494353707, -0.0784000015258789, 0.0 }, { 0.11615411426952052, -0.0784000015258789, 0.0 },
            { 0.11692816181141515, -0.0784000015258789, 0.0 }, { 0.11735079181837918, -0.0784000015258789, 0.0 },
            { 0.06407353977514504, -0.0784000015258789, 0.0 }, { 0.03498415678073093, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("forward right")
    {
        section = "forward right";
        inputs = {
            { 0.0f,  0.0f, false, false, false }, { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false },
            { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false },
            { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false },
            { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false },
            { 1.0f, -1.0f, false, false, false }, { 1.0f, -1.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4292893208276745, 1.0, 2.5707106791723255 }, { 2.3199706063428334, 1.0, 2.6800293936571666 },
            { 2.189571902128863, 1.0, 2.810428097871137 }, { 2.0476635221859096, 1.0, 2.9523364778140913 }, { 1.899470858564995, 1.0, 3.100529141435006 },
            { 1.7478469756573682, 1.0, 3.2521530243426326 }, { 1.5943496468015912, 1.0, 3.405650353198409 }, { 1.439829416339311, 1.0, 3.560170583660689 },
            { 1.2847506815350087, 1.0, 3.7152493184649913 }, { 1.1293670033245427, 1.0, 3.8706329966754573 }, { 0.9738168259949713, 1.0, 4.026183174005029 },
            { 0.8181757401358096, 1.0, 4.181824259864191 }, { 0.6624850182137259, 1.0, 4.337514981786274 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.03860803531251473, -0.0784000015258789, 0.03860803531251473 },
            { -0.05968802504164397, -0.0784000015258789, 0.05968802504164397 }, { -0.0711977007706276, -0.0784000015258789, 0.0711977007706276 },
            { -0.07748198444858874, -0.0784000015258789, 0.07748198444858874 }, { -0.08091320373530066, -0.0784000015258789, 0.08091320373530066 },
            { -0.08278664968345104, -0.0784000015258789, 0.08278664968345104 }, { -0.08380955128995383, -0.0784000015258789, 0.08380955128995383 },
            { -0.08436805563197612, -0.0784000015258789, 0.08436805563197612 }, { -0.08467299903814027, -0.0784000015258789, 0.08467299903814027 },
            { -0.08483949815724519, -0.0784000015258789, 0.08483949815724519 }, { -0.08493040668683575, -0.0784000015258789, 0.08493040668683575 },
            { -0.08498004274975757, -0.0784000015258789, 0.08498004274975757 }, { -0.08500714404326076, -0.0784000015258789, 0.08500714404326076 }
        };
    }

    SECTION("forward left")
    {
        section = "forward left";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false },
            { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false },
            { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false },
            { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false }, { 1.0f, 1.0f, false, false, false },
            { 1.0f, 1.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5980000033676625, 1.0, 2.5 }, { 2.722218690593828, 1.0, 2.5707106791723255 },
            { 2.8607527808695075, 1.0, 2.6800293936571666 }, { 3.0071030821180953, 1.0, 2.810428097871137 }, { 3.15772103505359, 1.0, 2.9523364778140913 },
            { 3.3106691260807874, 1.0, 3.100529141435006 }, { 3.46488947265383, 1.0, 3.2521530243426326 }, { 3.6198044708355903, 1.0, 3.405650353198409 },
            { 3.775098748839765, 1.0, 3.560170583660689 }, { 3.930600113651031, 1.0, 3.7152493184649913 }, { 4.086214547872102, 1.0, 3.8706329966754573 },
            { 4.241890717998098, 1.0, 4.026183174005029 }, { 4.3268899167597725, 1.0, 4.111113580691864 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.053508008053839436, -0.0784000015258789, 0.0 },
            { 0.06782341110335373, -0.0784000015258789, 0.03860803531251473 }, { 0.07563962207626197, -0.0784000015258789, 0.05968802504164397 },
            { 0.07990727376316883, -0.0784000015258789, 0.0711977007706276 }, { 0.08223741185487163, -0.0784000015258789, 0.07748198444858874 },
            { 0.08350966740071718, -0.0784000015258789, 0.08091320373530066 }, { 0.08420431900943447, -0.0784000015258789, 0.08278664968345104 },
            { 0.08458359883184846, -0.0784000015258789, 0.08380955128995383 }, { 0.08479068563894018, -0.0784000015258789, 0.08436805563197612 },
            { 0.08490375504874556, -0.0784000015258789, 0.08467299903814027 }, { 0.08496549095367008, -0.0784000015258789, 0.08483949815724519 },
            { 0.08499919876167412, -0.0784000015258789, 0.08493040668683575 }, { 0.046409567914467334, -0.0784000015258789, 0.04637200743724283 }
        };
    }

    SECTION("backward left")
    {
        section = "backward left";
        inputs = {
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false },
            { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false },
            { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false },
            { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false },
            { -1.0f, 1.0f, false, false, false }, { -1.0f, 1.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5980000033676625, 1.0, 2.5 }, { 2.722218690593828, 1.0, 2.4292893208276745 },
            { 2.8607527808695075, 1.0, 2.3199706063428334 }, { 3.0071030821180953, 1.0, 2.189571902128863 }, { 3.15772103505359, 1.0, 2.0476635221859087 },
            { 3.3106691260807874, 1.0, 1.8994708585649942 }, { 3.46488947265383, 1.0, 1.7478469756573674 }, { 3.6198044708355903, 1.0, 1.5943496468015912 },
            { 3.775098748839765, 1.0, 1.439829416339311 }, { 3.930600113651031, 1.0, 1.2847506815350087 }, { 4.086214547872102, 1.0, 1.1293670033245427 },
            { 4.241890717998098, 1.0, 0.9738168259949713 }, { 4.397600595932098, 1.0, 0.8181757401358087 }, { 4.48261819915908, 1.0, 0.7331956973860514 },
            { 4.529037815912773, 1.0, 0.6867965886553051 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.053508008053839436, -0.0784000015258789, 0.0 },
            { 0.06782341110335373, -0.0784000015258789, -0.03860803531251473 }, { 0.07563962207626197, -0.0784000015258789, -0.05968802504164397 },
            { 0.07990727376316883, -0.0784000015258789, -0.0711977007706276 }, { 0.08223741185487163, -0.0784000015258789, -0.07748198444858874 },
            { 0.08350966740071718, -0.0784000015258789, -0.08091320373530066 }, { 0.08420431900943447, -0.0784000015258789, -0.08278664968345104 },
            { 0.08458359883184846, -0.0784000015258789, -0.08380955128995383 }, { 0.08479068563894018, -0.0784000015258789, -0.08436805563197612 },
            { 0.08490375504874556, -0.0784000015258789, -0.08467299903814027 }, { 0.08496549095367008, -0.0784000015258789, -0.08483949815724519 },
            { 0.08499919876167412, -0.0784000015258789, -0.08493040668683575 }, { 0.08501760322698206, -0.0784000015258789, -0.08498004274975757 },
            { 0.04641961675369266, -0.0784000015258789, -0.04639910873074603 }, { 0.025345113691417745, -0.0784000015258789, -0.025333916309588277 }
        };
    }

    SECTION("backward right")
    {
        section = "backward right";
        inputs = {
            {  0.0f,  0.0f, false, false, false }, {  0.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false },
            { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false },
            { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false },
            { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false },
            { -1.0f, -1.0f, false, false, false }, { -1.0f, -1.0f, false, false, false }, {  0.0f, -1.0f, false, false, false },
            {  0.0f,  0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4019999966323375, 1.0, 2.5 }, { 2.277781309406172, 1.0, 2.4292893208276745 },
            { 2.1392472191304925, 1.0, 2.3199706063428334 }, { 1.9928969178819047, 1.0, 2.189571902128863 }, { 1.8422789649464102, 1.0, 2.0476635221859087 },
            { 1.6893308739192126, 1.0, 1.8994708585649942 }, { 1.5351105273461698, 1.0, 1.7478469756573674 }, { 1.3801955291644097, 1.0, 1.5943496468015912 },
            { 1.2249012511602348, 1.0, 1.439829416339311 }, { 1.069399886348969, 1.0, 1.2847506815350087 }, { 0.9137854521278976, 1.0, 1.1293670033245427 },
            { 0.7581092820019015, 1.0, 0.9738168259949713 }, { 0.6023994040679015, 1.0, 0.8181757401358087 }, { 0.41938179747325677, 1.0, 0.7331956973860514 },
            { 0.31945417266572473, 1.0, 0.6867965886553051 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.053508008053839436, -0.0784000015258789, 0.0 },
            { -0.06782341110335373, -0.0784000015258789, -0.03860803531251473 }, { -0.07563962207626197, -0.0784000015258789, -0.05968802504164397 },
            { -0.07990727376316883, -0.0784000015258789, -0.0711977007706276 }, { -0.08223741185487163, -0.0784000015258789, -0.07748198444858874 },
            { -0.08350966740071718, -0.0784000015258789, -0.08091320373530066 }, { -0.08420431900943447, -0.0784000015258789, -0.08278664968345104 },
            { -0.08458359883184846, -0.0784000015258789, -0.08380955128995383 }, { -0.08479068563894018, -0.0784000015258789, -0.08436805563197612 },
            { -0.08490375504874556, -0.0784000015258789, -0.08467299903814027 }, { -0.08496549095367008, -0.0784000015258789, -0.08483949815724519 },
            { -0.08499919876167412, -0.0784000015258789, -0.08493040668683575 }, { -0.08501760322698206, -0.0784000015258789, -0.08498004274975757 },
            { -0.09992762480753209, -0.0784000015258789, -0.04639910873074603 }, { -0.05456048948225674, -0.0784000015258789, -0.025333916309588277 }
        };
    }

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 1.0, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on concrete#sprint", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, false, true }, { 1.0f, 0.0f, false, false, true }, { 1.0f, 0.0f, false, false, true },
            { 1.0f, 0.0f, false, false, true }, { 1.0f, 0.0f, false, false, true }, { 1.0f, 0.0f, false, false, true },
            { 1.0f, 0.0f, false, false, true }, { 1.0f, 0.0f, false, false, true }, { 0.0f, 0.0f, false, false, true },
            { 0.0f, 0.0f, false, false, true }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.6274000124096872 }, { 2.5, 1.0, 2.824360439674688 },
            { 2.5, 1.0, 3.0593008578621674 }, { 2.5, 1.0, 3.314978353501985 }, { 2.5, 1.0, 3.5819782947459107 },
            { 2.5, 1.0, 3.855160292007742 }, { 2.5, 1.0, 4.1317176922474115 }, { 2.5, 1.0, 4.28271805031736 },
            { 2.5, 1.0, 4.365164255399895 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0695604148553142 },
            { 0.0, -0.0784000015258789, 0.10754040577779149 }, { 0.0, -0.0784000015258789, 0.12827748323013013 },
            { 0.0, -0.0784000015258789, 0.13959992883423883 }, { 0.0, -0.0784000015258789, 0.14578198485214422 },
            { 0.0, -0.0784000015258789, 0.1491573878299825 }, { 0.0, -0.0784000015258789, 0.15100035806994805 },
            { 0.0, -0.0784000015258789, 0.08244620508253499 }, { 0.0, -0.0784000015258789, 0.045015633203748184 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true },
            { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true },
            { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true },
            { -1.0f, 0.0f, false, false, true }, { -1.0f, 0.0f, false, false, true }, {  0.0f, 0.0f, false, false, true },
            {  0.0f, 0.0f, false, false, true }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.4019999966323375 }, { 2.5, 1.0, 2.250491985210836 },
            { 2.5, 1.0, 2.069768597998495 }, { 2.5, 1.0, 1.8730936137515357 }, { 2.5, 1.0, 1.6677090565120363 },
            { 2.5, 1.0, 1.4575690718662528 }, { 2.5, 1.0, 1.2448326235550535 }, { 2.5, 1.0, 1.0306785059178711 },
            { 2.5, 1.0, 0.8157503407387932 }, { 2.5, 1.0, 0.6003995455527509 }, { 2.5, 1.0, 0.48281799772376566 },
            { 2.5, 1.0, 0.41861846515219625 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.053508008053839436 },
            { 0.0, -0.0784000015258789, -0.08272338384467842 }, { 0.0, -0.0784000015258789, -0.09867498087929642 },
            { 0.0, -0.0784000015258789, -0.10738455387183765 }, { 0.0, -0.0784000015258789, -0.11213998127812054 },
            { 0.0, -0.0784000015258789, -0.11473644494353707 }, { 0.0, -0.0784000015258789, -0.11615411426952052 },
            { 0.0, -0.0784000015258789, -0.11692816181141515 }, { 0.0, -0.0784000015258789, -0.11735079181837918 },
            { 0.0, -0.0784000015258789, -0.11758154782898447 }, { 0.0, -0.0784000015258789, -0.06419953257156992 },
            { 0.0, -0.0784000015258789, -0.03505294885556929 }
        };
    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, false, true }, { 0.0f, -1.0f, false, false, true }, { 0.0f, -1.0f, false, false, true },
            { 0.0f, -1.0f, false, false, true }, { 0.0f, -1.0f, false, false, true }, { 0.0f, -1.0f, false, false, true },
            { 0.0f, -1.0f, false, false, true }, { 0.0f, -1.0f, false, false, true }, { 0.0f, -1.0f, false, false, true },
            { 0.0f,  0.0f, false, false, true }, { 0.0f,  0.0f, false, false, true }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4019999966323375, 1.0, 2.5 }, { 2.250491985210836, 1.0, 2.5 },
            { 2.069768597998495, 1.0, 2.5 }, { 1.8730936137515357, 1.0, 2.5 }, { 1.6677090565120354, 1.0, 2.5 },
            { 1.4575690718662528, 1.0, 2.5 }, { 1.2448326235550535, 1.0, 2.5 }, { 1.0306785059178702, 1.0, 2.5 },
            { 0.9137503441064552, 1.0, 2.5 }, { 0.8499075603419155, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.053508008053839436, -0.0784000015258789, 0.0 },
            { -0.08272338384467842, -0.0784000015258789, 0.0 }, { -0.09867498087929642, -0.0784000015258789, 0.0 },
            { -0.10738455387183765, -0.0784000015258789, 0.0 }, { -0.11213998127812054, -0.0784000015258789, 0.0 },
            { -0.11473644494353707, -0.0784000015258789, 0.0 }, { -0.11615411426952052, -0.0784000015258789, 0.0 },
            { -0.11692816181141515, -0.0784000015258789, 0.0 }, { -0.06384278376453975, -0.0784000015258789, 0.0 },
            { -0.034858163984306044, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, false, true }, { 0.0f, 1.0f, false, false, true }, { 0.0f, 1.0f, false, false, true },
            { 0.0f, 1.0f, false, false, true }, { 0.0f, 1.0f, false, false, true }, { 0.0f, 1.0f, false, false, true },
            { 0.0f, 1.0f, false, false, true }, { 0.0f, 1.0f, false, false, true }, { 0.0f, 1.0f, false, false, true },
            { 0.0f, 1.0f, false, false, true }, { 0.0f, 0.0f, false, false, true }, { 0.0f, 0.0f, false, false, true }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5980000033676625, 1.0, 2.5 }, { 2.749508014789164, 1.0, 2.5 },
            { 2.930231402001505, 1.0, 2.5 }, { 3.1269063862484643, 1.0, 2.5 }, { 3.3322909434879646, 1.0, 2.5 },
            { 3.542430928133747, 1.0, 2.5 }, { 3.7551673764449465, 1.0, 2.5 }, { 3.9693214940821298, 1.0, 2.5 },
            { 4.184249659261208, 1.0, 2.5 }, { 4.301600451079587, 1.0, 2.5 }, { 4.365673990854732, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.053508008053839436, -0.0784000015258789, 0.0 },
            { 0.08272338384467842, -0.0784000015258789, 0.0 }, { 0.09867498087929642, -0.0784000015258789, 0.0 },
            { 0.10738455387183765, -0.0784000015258789, 0.0 }, { 0.11213998127812054, -0.0784000015258789, 0.0 },
            { 0.11473644494353707, -0.0784000015258789, 0.0 }, { 0.11615411426952052, -0.0784000015258789, 0.0 },
            { 0.11692816181141515, -0.0784000015258789, 0.0 }, { 0.11735079181837918, -0.0784000015258789, 0.0 },
            { 0.06407353977514504, -0.0784000015258789, 0.0 }, { 0.03498415678073093, -0.0784000015258789, 0.0 }
        };
    }

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 1.0, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on concrete#sneak", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    // Bot needs to be created first for swift_sneak case
    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 1.0, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.5294000033944855 }, { 2.5, 1.0, 2.574852410506887 },
            { 2.5, 1.0, 2.6290694310673057 }, { 2.5, 1.0, 2.6880719311261867 }, { 2.5, 1.0, 2.749687303294719 },
            { 2.5, 1.0, 2.812729303800829 }, { 2.5, 1.0, 2.8765502434697314 }, { 2.5, 1.0, 2.940796483970919 },
            { 2.5, 1.0, 3.005274938753507 }, { 2.5, 1.0, 3.0698801825484647 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.016052403717917444 },
            { 0.0, -0.0784000015258789, 0.024817017165933247 }, { 0.0, -0.0784000015258789, 0.0296024966643959 },
            { 0.0, -0.0784000015258789, 0.032215368774048465 }, { 0.0, -0.0784000015258789, 0.033641997111625396 },
            { 0.0, -0.0784000015258789, 0.03442093627441823 }, { 0.0, -0.0784000015258789, 0.034846237106702926 },
            { 0.0, -0.0784000015258789, 0.03507845138810267 }, { 0.0, -0.0784000015258789, 0.035205240400473806 },
            { 0.0, -0.0784000015258789, 0.03527446720926932 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false },
            { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false },
            { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false },
            { -1.0f, 0.0f, false, true, false }, { -1.0f, 0.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.4705999966055145 }, { 2.5, 1.0, 2.425147589493113 },
            { 2.5, 1.0, 2.3709305689326943 }, { 2.5, 1.0, 2.3119280688738133 }, { 2.5, 1.0, 2.250312696705281 },
            { 2.5, 1.0, 2.187270696199171 }, { 2.5, 1.0, 2.1234497565302686 }, { 2.5, 1.0, 2.059203516029081 },
            { 2.5, 1.0, 1.994725061246493 }, { 2.5, 1.0, 1.9301198174515353 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.016052403717917444 },
            { 0.0, -0.0784000015258789, -0.024817017165933247 }, { 0.0, -0.0784000015258789, -0.0296024966643959 },
            { 0.0, -0.0784000015258789, -0.032215368774048465 }, { 0.0, -0.0784000015258789, -0.033641997111625396 },
            { 0.0, -0.0784000015258789, -0.03442093627441823 }, { 0.0, -0.0784000015258789, -0.034846237106702926 },
            { 0.0, -0.0784000015258789, -0.03507845138810267 }, { 0.0, -0.0784000015258789, -0.035205240400473806 },
            { 0.0, -0.0784000015258789, -0.03527446720926932 }
        };
    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, true, false }, { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false },
            { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false },
            { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false },
            { 0.0f, -1.0f, false, true, false }, { 0.0f, -1.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4705999966055154, 1.0, 2.5 }, { 2.425147589493114, 1.0, 2.5 },
            { 2.370930568932696, 1.0, 2.5 }, { 2.311928068873816, 1.0, 2.5 }, { 2.250312696705283, 1.0, 2.5 },
            { 2.187270696199173, 1.0, 2.5 }, { 2.1234497565302703, 1.0, 2.5 }, { 2.0592035160290827, 1.0, 2.5 },
            { 1.9947250612464957, 1.0, 2.5 }, { 1.930119817451537, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.016052403717917444, -0.0784000015258789, 0.0 },
            { -0.024817017165933247, -0.0784000015258789, 0.0 }, { -0.0296024966643959, -0.0784000015258789, 0.0 },
            { -0.032215368774048465, -0.0784000015258789, 0.0 }, { -0.033641997111625396, -0.0784000015258789, 0.0 },
            { -0.03442093627441823, -0.0784000015258789, 0.0 }, { -0.034846237106702926, -0.0784000015258789, 0.0 },
            { -0.03507845138810267, -0.0784000015258789, 0.0 }, { -0.035205240400473806, -0.0784000015258789, 0.0 },
            { -0.03527446720926932, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, true, false }, { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false },
            { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false },
            { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false },
            { 0.0f, 1.0f, false, true, false }, { 0.0f, 1.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5294000033944846, 1.0, 2.5 }, { 2.574852410506886, 1.0, 2.5 },
            { 2.629069431067304, 1.0, 2.5 }, { 2.688071931126184, 1.0, 2.5 }, { 2.749687303294717, 1.0, 2.5 },
            { 2.812729303800827, 1.0, 2.5 }, { 2.8765502434697297, 1.0, 2.5 }, { 2.9407964839709173, 1.0, 2.5 },
            { 3.0052749387535043, 1.0, 2.5 }, { 3.069880182548463, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.016052403717917444, -0.0784000015258789, 0.0 },
            { 0.024817017165933247, -0.0784000015258789, 0.0 }, { 0.0296024966643959, -0.0784000015258789, 0.0 },
            { 0.032215368774048465, -0.0784000015258789, 0.0 }, { 0.033641997111625396, -0.0784000015258789, 0.0 },
            { 0.03442093627441823, -0.0784000015258789, 0.0 }, { 0.034846237106702926, -0.0784000015258789, 0.0 },
            { 0.03507845138810267, -0.0784000015258789, 0.0 }, { 0.035205240400473806, -0.0784000015258789, 0.0 },
            { 0.03527446720926932, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("forward left")
    {
        section = "forward left";
        inputs = {
            { 0.0f, 0.0f, false, true, false }, { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false },
            { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false },
            { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false },
            { 1.0f, 1.0f, false, true, false }, { 1.0f, 1.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5294000033944846, 1.0, 2.5294000033944855 }, { 2.574852410506886, 1.0, 2.574852410506887 },
            { 2.629069431067304, 1.0, 2.6290694310673057 }, { 2.688071931126184, 1.0, 2.6880719311261867 }, { 2.749687303294717, 1.0, 2.749687303294719 },
            { 2.812729303800827, 1.0, 2.812729303800829 }, { 2.8765502434697297, 1.0, 2.8765502434697314 }, { 2.9407964839709173, 1.0, 2.940796483970919 },
            { 3.0052749387535043, 1.0, 3.005274938753507 }, { 3.069880182548463, 1.0, 3.0698801825484647 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.016052403717917444, -0.0784000015258789, 0.016052403717917444 },
            { 0.024817017165933247, -0.0784000015258789, 0.024817017165933247 }, { 0.0296024966643959, -0.0784000015258789, 0.0296024966643959 },
            { 0.032215368774048465, -0.0784000015258789, 0.032215368774048465 }, { 0.033641997111625396, -0.0784000015258789, 0.033641997111625396 },
            { 0.03442093627441823, -0.0784000015258789, 0.03442093627441823 }, { 0.034846237106702926, -0.0784000015258789, 0.034846237106702926 },
            { 0.03507845138810267, -0.0784000015258789, 0.03507845138810267 }, { 0.035205240400473806, -0.0784000015258789, 0.035205240400473806 },
            { 0.03527446720926932, -0.0784000015258789, 0.03527446720926932 }
        };
    }

#if PROTOCOL_VERSION > 758 /* > 1.18.2 */
    SECTION("forward swift sneak III")
    {
        section = "forward swift sneak III";
        inputs = {
            { 0.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 0.0f, 0.0f, false, true, false }, { 0.0f, 0.0f, false, true, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.5735000025257477 }, { 2.5, 1.0, 2.687131011091875 },
            { 2.5, 1.0, 2.822673551501131 }, { 2.5, 1.0, 2.97017978968635 }, { 2.5, 1.0, 3.124218207615975 },
            { 2.5, 1.0, 3.281823196100312 }, { 2.5, 1.0, 3.441375532333712 }, { 2.5, 1.0, 3.6019911205615998 },
            { 2.5, 1.0, 3.7631872444459074 }, { 2.5, 1.0, 3.9247003408354377 }, { 2.5, 1.0, 4.086386504232923 },
            { 2.5, 1.0, 4.174667159701981 }, { 2.5, 1.0, 4.222868403186787 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.04013100604037958 },
            { 0.0, -0.0784000015258789, 0.06204253788350883 }, { 0.0, -0.0784000015258789, 0.07400623565947233 },
            { 0.0, -0.0784000015258789, 0.08053841540387825 }, { 0.0, -0.0784000015258789, 0.08410498595859041 },
            { 0.0, -0.0784000015258789, 0.0860523337076528 }, { 0.0, -0.0784000015258789, 0.0871155857021404 },
            { 0.0, -0.0784000015258789, 0.08769612135856136 }, { 0.0, -0.0784000015258789, 0.08801309386378439 },
            { 0.0, -0.0784000015258789, 0.08818616087173836 }, { 0.0, -0.0784000015258789, 0.08828065546905701 },
            { 0.0, -0.0784000015258789, 0.048201243484806214 }, { 0.0, -0.0784000015258789, 0.02631788199959534 }
        };
        MinecraftServer::GetInstance().SendLine("item replace entity " + bot->GetNetworkManager()->GetMyName() + " armor.legs with minecraft:netherite_leggings{Enchantments:[{id:swift_sneak,lvl:3}]} 1");

        REQUIRE(Utilities::WaitForCondition([&]() -> bool
            {
                return !bot->GetInventoryManager()->GetPlayerInventory()->GetSlot(Window::INVENTORY_LEGS_ARMOR).IsEmptySlot();
            }, 5000));
    }
#endif

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on concrete#jump", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("on the spot")
    {
        section = "on the spot";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f,  true, false, false }, { 0.0f, 0.0f,  true, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.4199999868869781, 2.5 }, { 2.5, 1.753199980521202, 2.5 },
            { 2.5, 2.001335979112148, 2.5 }, { 2.5, 2.1661092609382147, 2.5 }, { 2.5, 2.249187078744682, 2.5 },
            { 2.5, 2.2522033402537245, 2.5 }, { 2.5, 2.1767592750642377, 2.5 }, { 2.5, 2.0244240882136806, 2.5 },
            { 2.5, 1.7967356006686925, 2.5 }, { 2.5, 1.495200877005912, 2.5 }, { 2.5, 1.1212968405391899, 2.5 },
            { 2.5, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, 0.33319999363422365, 0.0 },
            { 0.0, 0.24813599859094576, 0.0 }, { 0.0, 0.16477328182606651, 0.0 },
            { 0.0, 0.08307781780646721, 0.0 }, { 0.0, 0.0030162615090425808, 0.0 },
            { 0.0, -0.07544406518948656, 0.0 }, { 0.0, -0.15233518685055708, 0.0 },
            { 0.0, -0.22768848754498797, 0.0 }, { 0.0, -0.30153472366278034, 0.0 },
            { 0.0, -0.3739040364667221, 0.0 }, { 0.0, -0.4448259643949201, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f,  true, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.4199999868869781, 2.5 }, { 2.5, 1.753199980521202, 2.5 },
            { 2.5, 2.001335979112148, 2.5 }, { 2.5, 2.1661092609382147, 2.5195999999433756 }, { 2.5, 2.249187078744682, 2.557036000349253 },
            { 2.5, 2.2522033402537245, 2.6107027616437755 }, { 2.5, 2.1767592750642377, 2.6791395157726328 }, { 2.5, 2.0244240882136806, 2.7610169637680944 },
            { 2.5, 1.7967356006686925, 2.8551254435346607 }, { 2.5, 1.495200877005912, 2.9407641625903302 }, { 2.5, 1.1212968405391899, 3.018695399176954 },
            { 2.5, 1.0, 3.0896128265146103 }, { 2.5, 1.0, 3.1541476872517613 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, 0.33319999363422365, 0.0 },
            { 0.0, 0.24813599859094576, 0.0 }, { 0.0, 0.16477328182606651, 0.0 },
            { 0.0, 0.08307781780646721, 0.017836000462502232 }, { 0.0, 0.0030162615090425808, 0.034066761351146994 },
            { 0.0, -0.07544406518948656, 0.04883675418548237 }, { 0.0, -0.15233518685055708, 0.06227744805208603 },
            { 0.0, -0.22768848754498797, 0.07450847982319159 }, { 0.0, -0.30153472366278034, 0.08563871905566922 },
            { 0.0, -0.3739040364667221, 0.07793123658662378 }, { 0.0, -0.4448259643949201, 0.07091742733765566 },
            { 0.0, -0.0784000015258789, 0.0645348607371502 }, { 0.0, -0.0784000015258789, 0.03523603805524242 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f,  true, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.4199999868869781, 2.5 }, { 2.5, 1.753199980521202, 2.5 },
            { 2.5, 2.001335979112148, 2.5 }, { 2.5, 2.1661092609382147, 2.4804000000566244 }, { 2.5, 2.249187078744682, 2.442963999650747 },
            { 2.5, 2.2522033402537245, 2.3892972383562245 }, { 2.5, 2.1767592750642377, 2.3208604842273672 }, { 2.5, 2.0244240882136806, 2.2389830362319056 },
            { 2.5, 1.7967356006686925, 2.1448745564653393 }, { 2.5, 1.495200877005912, 2.039635837466294 }, { 2.5, 1.1212968405391899, 1.9438686004171686 },
            { 2.5, 1.0, 1.8567204121908674 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, 0.33319999363422365, 0.0 },
            { 0.0, 0.24813599859094576, 0.0 }, { 0.0, 0.16477328182606651, 0.0 },
            { 0.0, 0.08307781780646721, -0.017836000462502232 }, { 0.0, 0.0030162615090425808, -0.034066761351146994 },
            { 0.0, -0.07544406518948656, -0.04883675418548237 }, { 0.0, -0.15233518685055708, -0.06227744805208603 },
            { 0.0, -0.22768848754498797, -0.07450847982319159 }, { 0.0, -0.30153472366278034, -0.08563871905566922 },
            { 0.0, -0.3739040364667221, -0.09576723704912601 }, { 0.0, -0.4448259643949201, -0.08714818822630041 },
            { 0.0, -0.0784000015258789, -0.07930485357148556 }
        };
    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, false, false }, { 0.0f,  0.0f,  true, false, false }, { 0.0f,  0.0f,  true, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f,  0.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.4199999868869781, 2.5 }, { 2.5, 1.753199980521202, 2.5 },
            { 2.4804000000566244, 2.001335979112148, 2.5 }, { 2.442963999650747, 2.1661092609382147, 2.5 }, { 2.3892972383562245, 2.249187078744682, 2.5 },
            { 2.3208604842273663, 2.2522033402537245, 2.5 }, { 2.2389830362319048, 2.1767592750642377, 2.5 }, { 2.1448745564653375, 2.0244240882136806, 2.5 },
            { 2.0396358374662924, 1.7967356006686925, 2.5 }, { 1.9242686004737912, 1.495200877005912, 2.5 }, { 1.7996844118416133, 1.1212968405391899, 2.5 },
            { 1.6863127969189806, 1.0, 2.5 }, { 1.5831446243660965, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, 0.33319999363422365, 0.0 },
            { 0.0, 0.24813599859094576, 0.0 }, { -0.017836000462502232, 0.16477328182606651, 0.0 },
            { -0.034066761351146994, 0.08307781780646721, 0.0 }, { -0.04883675418548237, 0.0030162615090425808, 0.0 },
            { -0.06227744805208603, -0.07544406518948656, 0.0 }, { -0.07450847982319159, -0.15233518685055708, 0.0 },
            { -0.08563871905566922, -0.22768848754498797, 0.0 }, { -0.09576723704912601, -0.30153472366278034, 0.0 },
            { -0.10498418868880265, -0.3739040364667221, 0.0 }, { -0.11337161492263256, -0.4448259643949201, 0.0 },
            { -0.10316817255288456, -0.0784000015258789, 0.0 }, { -0.05632982875673259, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f,  true, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.4199999868869781, 2.5 }, { 2.5, 1.753199980521202, 2.5 },
            { 2.5, 2.001335979112148, 2.5 }, { 2.5195999999433756, 2.1661092609382147, 2.5 }, { 2.557036000349253, 2.249187078744682, 2.5 },
            { 2.6107027616437755, 2.2522033402537245, 2.5 }, { 2.6791395157726337, 2.1767592750642377, 2.5 }, { 2.7610169637680952, 2.0244240882136806, 2.5 },
            { 2.8551254435346625, 1.7967356006686925, 2.5 }, { 2.940764162590332, 1.495200877005912, 2.5 }, { 3.0186953991769556, 1.1212968405391899, 2.5 },
            { 3.089612826514611, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, 0.33319999363422365, 0.0 },
            { 0.0, 0.24813599859094576, 0.0 }, { 0.0, 0.16477328182606651, 0.0 },
            { 0.017836000462502232, 0.08307781780646721, 0.0 }, { 0.034066761351146994, 0.0030162615090425808, 0.0 },
            { 0.04883675418548237, -0.07544406518948656, 0.0 }, { 0.06227744805208603, -0.15233518685055708, 0.0 },
            { 0.07450847982319159, -0.22768848754498797, 0.0 }, { 0.08563871905566922, -0.30153472366278034, 0.0 },
            { 0.07793123658662378, -0.3739040364667221, 0.0 }, { 0.07091742733765566, -0.4448259643949201, 0.0 },
            { 0.0645348607371502, -0.0784000015258789, 0.0 }
        };
    }

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 1.0, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on ice", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.5224906290974545 }, { 2.5, 1.0, 2.565038402257848 },
            { 2.5, 1.0, 2.62547313741554 }, { 2.5, 1.0, 2.701859466104633 }, { 2.5, 1.0, 2.7924714266382793 },
            { 2.5, 1.0, 2.895769806304809 }, { 2.5, 1.0, 3.010381935137202 }, { 2.5, 1.0, 3.135083665995772 },
            { 2.5, 1.0, 3.2687833044050763 }, { 2.5, 1.0, 3.388016648084278 }, { 2.5, 1.0, 3.4943489494582014 },
            { 2.5, 1.0, 3.5891761007112546 }, { 2.5, 1.0, 3.673742958557657 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.02005714406293894 },
            { 0.0, -0.0784000015258789, 0.03794410606023668 }, { 0.0, -0.0784000015258789, 0.05389569959163861 },
            { 0.0, -0.0784000015258789, 0.06812133143619138 }, { 0.0, -0.0784000015258789, 0.0808077505690746 },
            { 0.0, -0.0784000015258789, 0.09212149973493779 }, { 0.0, -0.0784000015258789, 0.10221110176111484 },
            { 0.0, -0.0784000015258789, 0.1112090093118493 }, { 0.0, -0.0784000015258789, 0.11923334367920202 },
            { 0.0, -0.0784000015258789, 0.10633230137392363 }, { 0.0, -0.0784000015258789, 0.09482715125305284 },
            { 0.0, -0.0784000015258789, 0.08456685784640186 }, { 0.0, -0.0784000015258789, 0.07541672771471457 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5, 1.0, 2.4775093709025455 }, { 2.5, 1.0, 2.434961597742152 },
            { 2.5, 1.0, 2.37452686258446 }, { 2.5, 1.0, 2.298140533895367 }, { 2.5, 1.0, 2.2075285733617207 },
            { 2.5, 1.0, 2.104230193695191 }, { 2.5, 1.0, 1.989618064862798 }, { 2.5, 1.0, 1.8649163340042278 },
            { 2.5, 1.0, 1.7312166955949237 }, { 2.5, 1.0, 1.5894927228182674 }, { 2.5, 1.0, 1.4406126482839507 },
            { 2.5, 1.0, 1.3078413909706619 }, { 2.5, 1.0, 1.1894359775955596 }, { 2.5, 1.0, 1.0838420245048912 },
            { 2.5, 1.0, 0.9896733322847844 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.02005714406293894 },
            { 0.0, -0.0784000015258789, -0.03794410606023668 }, { 0.0, -0.0784000015258789, -0.05389569959163861 },
            { 0.0, -0.0784000015258789, -0.06812133143619138 }, { 0.0, -0.0784000015258789, -0.0808077505690746 },
            { 0.0, -0.0784000015258789, -0.09212149973493779 }, { 0.0, -0.0784000015258789, -0.10221110176111484 },
            { 0.0, -0.0784000015258789, -0.1112090093118493 }, { 0.0, -0.0784000015258789, -0.11923334367920202 },
            { 0.0, -0.0784000015258789, -0.1263894454368626 }, { 0.0, -0.0784000015258789, -0.13277125731328954 },
            { 0.0, -0.0784000015258789, -0.11840541337510155 }, { 0.0, -0.0784000015258789, -0.10559395309066928 },
            { 0.0, -0.0784000015258789, -0.09416869222010689 }, { 0.0, -0.0784000015258789, -0.0839796440505532 }
        };
    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f,  0.0f, false, false, false },
            { 0.0f,  0.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.4775093709025455, 1.0, 2.5 }, { 2.434961597742152, 1.0, 2.5 },
            { 2.374526862584461, 1.0, 2.5 }, { 2.298140533895368, 1.0, 2.5 }, { 2.2075285733617225, 1.0, 2.5 },
            { 2.1042301936951935, 1.0, 2.5 }, { 1.9896180648628015, 1.0, 2.5 }, { 1.8649163340042323, 1.0, 2.5 },
            { 1.7312166955949282, 1.0, 2.5 }, { 1.5894927228182718, 1.0, 2.5 }, { 1.4631032773814088, 1.0, 2.5 },
            { 1.350389164131058, 1.0, 2.5 }, { 1.2498707127532542, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.02005714406293894, -0.0784000015258789, 0.0 },
            { -0.03794410606023668, -0.0784000015258789, 0.0 }, { -0.05389569959163861, -0.0784000015258789, 0.0 },
            { -0.06812133143619138, -0.0784000015258789, 0.0 }, { -0.0808077505690746, -0.0784000015258789, 0.0 },
            { -0.09212149973493779, -0.0784000015258789, 0.0 }, { -0.10221110176111484, -0.0784000015258789, 0.0 },
            { -0.1112090093118493, -0.0784000015258789, 0.0 }, { -0.11923334367920202, -0.0784000015258789, 0.0 },
            { -0.1263894454368626, -0.0784000015258789, 0.0 }, { -0.11271411325035059, -0.0784000015258789, 0.0 },
            { -0.10051845137780381, -0.0784000015258789, 0.0 }, { -0.08964235955926735, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 1.0, 2.5 }, { 2.5224906290974545, 1.0, 2.5 }, { 2.565038402257848, 1.0, 2.5 },
            { 2.625473137415539, 1.0, 2.5 }, { 2.701859466104632, 1.0, 2.5 }, { 2.7924714266382775, 1.0, 2.5 },
            { 2.8957698063048065, 1.0, 2.5 }, { 3.0103819351371985, 1.0, 2.5 }, { 3.1350836659957677, 1.0, 2.5 },
            { 3.268783304405072, 1.0, 2.5 }, { 3.410507277181728, 1.0, 2.5 }, { 3.5368967226185912, 1.0, 2.5 },
            { 3.649610835868942, 1.0, 2.5 }, { 3.7501292872467458, 1.0, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.02005714406293894, -0.0784000015258789, 0.0 },
            { 0.03794410606023668, -0.0784000015258789, 0.0 }, { 0.05389569959163861, -0.0784000015258789, 0.0 },
            { 0.06812133143619138, -0.0784000015258789, 0.0 }, { 0.0808077505690746, -0.0784000015258789, 0.0 },
            { 0.09212149973493779, -0.0784000015258789, 0.0 }, { 0.10221110176111484, -0.0784000015258789, 0.0 },
            { 0.1112090093118493, -0.0784000015258789, 0.0 }, { 0.11923334367920202, -0.0784000015258789, 0.0 },
            { 0.1263894454368626, -0.0784000015258789, 0.0 }, { 0.11271411325035059, -0.0784000015258789, 0.0 },
            { 0.10051845137780381, -0.0784000015258789, 0.0 }, { 0.08964235955926735, -0.0784000015258789, 0.0 }
        };
    }

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 1.0, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("walk on soul sand", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    // Bot needs to be created first for swift_sneak case
    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.0, 0.875, 2.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("forward")
    {
        section = "forward";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 0.875, 2.5 }, { 2.5, 0.875, 2.5980000033676625 }, { 2.5, 0.875, 2.717403210275794 },
            { 2.5, 0.875, 2.8414808774497686 }, { 2.5, 0.875, 2.9665794468795976 }, { 2.5, 0.875, 3.0919009813913245 },
            { 2.5, 0.875, 3.21727121148332 }, { 2.5, 0.875, 3.34265207669144 }, { 2.5, 0.875, 3.4680352646092256 },
            { 2.5, 0.875, 3.5934189598068684 }, { 2.5, 0.875, 3.7188027657944467 }, { 2.5, 0.875, 3.746186592610888 },
            { 2.5, 0.875, 3.7521672211713835 }, { 2.5, 0.875, 3.7521672211713835 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.021403203540468353 },
            { 0.0, -0.0784000015258789, 0.02607766380631236 }, { 0.0, -0.0784000015258789, 0.027098566062165805 },
            { 0.0, -0.0784000015258789, 0.027321531144064614 }, { 0.0, -0.0784000015258789, 0.02737022672433305 },
            { 0.0, -0.0784000015258789, 0.027380861840457446 }, { 0.0, -0.0784000015258789, 0.027383184550123424 },
            { 0.0, -0.0784000015258789, 0.027383691829980947 }, { 0.0, -0.0784000015258789, 0.027383802619916353 },
            { 0.0, -0.0784000015258789, 0.027383826816441414 }, { 0.0, -0.0784000015258789, 0.005980628560494825 },
            { 0.0, -0.0784000015258789, 0.0013061694487905224 }, { 0.0, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("backward")
    {
        section = "backward";
        inputs = {
            {  0.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 0.875, 2.5 }, { 2.5, 0.875, 2.4019999966323375 }, { 2.5, 0.875, 2.282596789724206 },
            { 2.5, 0.875, 2.1585191225502314 }, { 2.5, 0.875, 2.0334205531204024 }, { 2.5, 0.875, 1.9080990186086755 },
            { 2.5, 0.875, 1.78272878851668 }, { 2.5, 0.875, 1.65734792330856 }, { 2.5, 0.875, 1.5319647353907744 },
            { 2.5, 0.875, 1.4065810401931316 }, { 2.5, 0.875, 1.3791972375732158 }, { 2.5, 0.875, 1.3732166142972435 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.021403203540468353 },
            { 0.0, -0.0784000015258789, -0.02607766380631236 }, { 0.0, -0.0784000015258789, -0.027098566062165805 },
            { 0.0, -0.0784000015258789, -0.027321531144064614 }, { 0.0, -0.0784000015258789, -0.02737022672433305 },
            { 0.0, -0.0784000015258789, -0.027380861840457446 }, { 0.0, -0.0784000015258789, -0.027383184550123424 },
            { 0.0, -0.0784000015258789, -0.027383691829980947 }, { 0.0, -0.0784000015258789, -0.027383802619916353 },
            { 0.0, -0.0784000015258789, -0.0059806232759730595 }, { 0.0, -0.0784000015258789, -0.0013061682946508173 }
        };

    }

    SECTION("right")
    {
        section = "right";
        inputs = {
            { 0.0f,  0.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false }, { 0.0f, -1.0f, false, false, false },
            { 0.0f, -1.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }, { 0.0f,  0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 0.875, 2.5 }, { 2.4019999966323375, 0.875, 2.5 }, { 2.2825967897242068, 0.875, 2.5 },
            { 2.1585191225502323, 0.875, 2.5 }, { 2.033420553120404, 0.875, 2.5 }, { 1.9080990186086773, 0.875, 2.5 },
            { 1.7827287885166818, 0.875, 2.5 }, { 1.6573479233085617, 0.875, 2.5 }, { 1.5319647353907762, 0.875, 2.5 },
            { 1.4065810401931325, 0.875, 2.5 }, { 1.3791972375732158, 0.875, 2.5 }, { 1.3732166142972426, 0.875, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.021403203540468353, -0.0784000015258789, 0.0 },
            { -0.02607766380631236, -0.0784000015258789, 0.0 }, { -0.027098566062165805, -0.0784000015258789, 0.0 },
            { -0.027321531144064614, -0.0784000015258789, 0.0 }, { -0.02737022672433305, -0.0784000015258789, 0.0 },
            { -0.027380861840457446, -0.0784000015258789, 0.0 }, { -0.027383184550123424, -0.0784000015258789, 0.0 },
            { -0.027383691829980947, -0.0784000015258789, 0.0 }, { -0.027383802619916353, -0.0784000015258789, 0.0 },
            { -0.0059806232759730595, -0.0784000015258789, 0.0 }, { -0.0013061682946508173, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("left")
    {
        section = "left";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false },
            { 0.0f, 1.0f, false, false, false }, { 0.0f, 1.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 0.875, 2.5 }, { 2.5980000033676625, 0.875, 2.5 }, { 2.7174032102757932, 0.875, 2.5 },
            { 2.8414808774497677, 0.875, 2.5 }, { 2.966579446879596, 0.875, 2.5 }, { 3.0919009813913227, 0.875, 2.5 },
            { 3.217271211483318, 0.875, 2.5 }, { 3.3426520766914383, 0.875, 2.5 }, { 3.468035264609224, 0.875, 2.5 },
            { 3.5934189598068675, 0.875, 2.5 }, { 3.7188027657944467, 0.875, 2.5 }, { 3.746186592610888, 0.875, 2.5 },
            { 3.7521672211713826, 0.875, 2.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.021403203540468353, -0.0784000015258789, 0.0 },
            { 0.02607766380631236, -0.0784000015258789, 0.0 }, { 0.027098566062165805, -0.0784000015258789, 0.0 },
            { 0.027321531144064614, -0.0784000015258789, 0.0 }, { 0.02737022672433305, -0.0784000015258789, 0.0 },
            { 0.027380861840457446, -0.0784000015258789, 0.0 }, { 0.027383184550123424, -0.0784000015258789, 0.0 },
            { 0.027383691829980947, -0.0784000015258789, 0.0 }, { 0.027383802619916353, -0.0784000015258789, 0.0 },
            { 0.027383826816441414, -0.0784000015258789, 0.0 }, { 0.005980628560494825, -0.0784000015258789, 0.0 },
            { 0.0013061694487905224, -0.0784000015258789, 0.0 }
        };
    }

#if PROTOCOL_VERSION > 578 /* > 1.15.2 */
    SECTION("forward soul speed III")
    {
        section = "forward soul speed III";
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false }, { 0.0f, 0.0f, false, false, false },
            { 0.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 2.5, 0.875, 2.5 }, { 2.5, 0.875, 2.5980000033676625 }, { 2.5, 0.875, 2.749508014789164 },
            { 2.5, 0.875, 2.930231402001505 }, { 2.5, 0.875, 3.1269063862484643 }, { 2.5, 0.875, 3.3322909434879637 },
            { 2.5, 0.875, 3.602700934622309 }, { 2.5, 0.875, 3.750344806930885 }, { 2.5, 0.875, 3.8309583705748445 },
            { 2.5, 0.875, 3.874973381436906 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.053508008053839436 },
            { 0.0, -0.0784000015258789, 0.08272338384467842 }, { 0.0, -0.0784000015258789, 0.09867498087929642 },
            { 0.0, -0.0784000015258789, 0.10738455387183765 }, { 0.0, -0.0784000015258789, 0.11213998127812054 },
            { 0.0, -0.0784000015258789, 0.14764387230857592 }, { 0.0, -0.0784000015258789, 0.08061356364395969 },
            { 0.0, -0.0784000015258789, 0.04401501086206116 }, { 0.0, -0.0784000015258789, 0.02403219872208842 }
        };

        MinecraftServer::GetInstance().SendLine("item replace entity " + bot->GetNetworkManager()->GetMyName() + " armor.feet with minecraft:netherite_boots{Enchantments:[{id:soul_speed,lvl:3}]} 1");

        REQUIRE(Utilities::WaitForCondition([&]() -> bool
            {
                return !bot->GetInventoryManager()->GetPlayerInventory()->GetSlot(Window::INVENTORY_FEET_ARMOR).IsEmptySlot();
            }, 5000));
    }
#endif

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("jump bump", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::string section = "";
    std::vector<double> target_pos_y;
    std::vector<double> target_speed_y;
    std::vector<bool> target_flying;
    std::vector<bool> jumping;
    GameType game_mode = GameType::None;

    SECTION("Creative")
    {
        game_mode = GameType::Creative;
        section += "Creative/";
        SECTION("Long press")
        {
            section += "Long press";
            jumping = {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };
            target_flying = {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };
            target_pos_y = {
                1.0, 1.2000000476837158, 1.121600046157837, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.2000000476837158,
                1.121600046157837, 1.0, 1.0
            };
            target_speed_y = {
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, -0.0784000015258789,
                -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789,
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, -0.0784000015258789
            };
        }

        SECTION("Short press sparse")
        {
            section += "Short press sparse";
            jumping = {
                false, true, true, false, false, false, false, false, false, true, false, false
            };
            target_flying = {
                false, false, false, false, false, false, false, false, false, false, false, false
            };
            target_pos_y = {
                1.0, 1.2000000476837158, 1.121600046157837, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.2000000476837158,
                1.121600046157837, 1.0
            };
            target_speed_y = {
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, -0.0784000015258789,
                -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789,
                -0.1552320045166016, -0.0784000015258789
            };
        }

        SECTION("Short press close")
        {
            section += "Short press close";
            jumping = {
                false, true, false, false, true, false, false, false, false, false, false
            };
            target_flying = {
                false, false, false, false, true, true, true, true, true, true, true
            };
            target_pos_y = {
                1.0, 1.2000000476837158, 1.121600046157837, 1.0, 1.0716000044345857, 1.1145600070953372, 1.1403360086917882, 1.1558016096496586, 1.165080970224381, 1.1706485865692144,
                1.1739891563761145
            };
            target_speed_y = {
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, 0.04296000266075134,
                0.0257760015964508, 0.01546560095787048, 0.009279360574722288, 0.005567616344833372, 0.003340569806900023,
                0.002004341884140014
            };
        }
    }

    SECTION("Survival")
    {
        game_mode = GameType::Survival;
        section += "Survival/";
        SECTION("Long press")
        {
            section += "Long press";
            jumping = {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true
            };
            target_flying = {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };
            target_pos_y = {
                1.0, 1.2000000476837158, 1.121600046157837, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.2000000476837158,
                1.121600046157837, 1.0
            };
            target_speed_y = {
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, -0.0784000015258789,
                -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789,
                -0.0784000015258789, -0.0784000015258789, -0.1552320045166016, -0.0784000015258789
            };
        }

        SECTION("Spam")
        {
            section += "Spam";
            jumping = {
                true, false, true, false, true, false, false, true, false
            };
            target_flying = {
                false, false, false, false, false, false, false, false, false
            };
            target_pos_y = {
                1.2000000476837158, 1.121600046157837, 1.0, 1.0, 1.2000000476837158, 1.121600046157837, 1.0,
                1.2000000476837158, 1.121600046157837
            };
            target_speed_y = {
                -0.0784000015258789, -0.1552320045166016, -0.0784000015258789, -0.0784000015258789, -0.0784000015258789,
                -0.1552320045166016, -0.0784000015258789, -0.0784000015258789, -0.1552320045166016
            };
        }
    }

    for (size_t i = 0; i < target_pos_y.size(); ++i)
    {
        target_pos_y[i] += test_offset.y;
    }

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(0.0, 1.0, 0.0), game_mode);
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    // First record all positions and speed
    std::vector<double> pos_y(target_pos_y.size());
    std::vector<double> speed_y(target_pos_y.size());
    std::vector<bool> flying(target_pos_y.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));

    for (size_t i = 0; i < target_pos_y.size(); ++i)
    {
        local_player->SetInputsJump(jumping[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        pos_y[i] = local_player->GetY();
        speed_y[i] = local_player->GetSpeedY();
        flying[i] = local_player->GetFlying();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < target_pos_y.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << pos_y[i] << " | Target: " << target_pos_y[i]);
        INFO("Speed " << speed_y[i] << " | Target: " << target_speed_y[i]);
        INFO("Flying " << flying[i] << " | Target: " << target_flying[i]);
        REQUIRE_THAT(std::abs(pos_y[i] - target_pos_y[i]), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::abs(speed_y[i] - target_speed_y[i]), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE(flying[i] == target_flying[i]);
    }
}

TEST_CASE("block transition", "[!mayfail][.physics]")
{
    const Position& test_offset = TestManager::GetInstance().GetCurrentOffset();

    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(1.0, 1.0, 1.0));
    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();

    std::string section = "";
    std::vector<PlayerInputs> inputs;
    std::vector<Vector3<double>> target_pos;
    std::vector<Vector3<double>> target_speed;

    SECTION("sneak small step down")
    {
        section = "sneak small step down";
        local_player->SetYaw(0.0f);
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false }, { 0.0f, 0.0f, false, true, false },
            { 0.0f, 0.0f, false,  true, false }, { 0.0f, 0.0f, false, true, false }
        };
        target_pos = {
            { 1.5, 1.0, 1.5 }, { 1.5, 1.0, 1.5980000033676625 }, { 1.5, 1.0, 1.6809080148159872 },
            { 1.5, 1.0, 1.755575797719228 }, { 1.5, 1.0, 1.8257444153142632 }, { 1.5, 1.0, 1.8934564883656844 },
            { 1.5, 1.0, 1.9598272879405005 }, { 1.5, 1.0, 2.0254657521120265 }, { 1.5, 1.0, 2.090704361106912 },
            { 1.5, 1.0, 2.1557246491499935 }, { 1.5, 1.0, 2.2206257339395457 }, { 1.5, 1.0, 2.285461733745109 },
            { 1.5, 1.0, 2.3502621971452875 }, { 1.5, 0.9215999984741212, 2.4150432576658716 }, { 1.5, 0.7663679939575196, 2.4562937212783336 },
            { 1.5, 0.5358406250445555, 2.499711644707359 }, { 1.5, 0.5, 2.5451019566263025 }, { 1.5, 0.5, 2.5864071416629493 },
            { 1.5, 0.5, 2.6089597753125062 }, { 1.5, 0.5, 2.621273514715437 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.053508008053839436 },
            { 0.0, -0.0784000015258789, 0.045267779508756434 }, { 0.0, -0.0784000015258789, 0.04076861420055125 },
            { 0.0, -0.0784000015258789, 0.03831206965693711 }, { 0.0, -0.0784000015258789, 0.03697079618033136 },
            { 0.0, -0.0784000015258789, 0.03623846077704194 }, { 0.0, -0.0784000015258789, 0.035838605600401675 },
            { 0.0, -0.0784000015258789, 0.03562028464859754 }, { 0.0, -0.0784000015258789, 0.03550108139506671 },
            { 0.0, -0.0784000015258789, 0.0354359964110791 }, { 0.0, -0.0784000015258789, 0.03540046000569421 },
            { 0.0, -0.0784000015258789, 0.03538105712610037 }, { 0.0, -0.1552320045166016, 0.03537046315261161 },
            { 0.0, -0.230527368912964, 0.037537922969176366 }, { 0.0, -0.30431682745754424, 0.039510311459094186 },
            { 0.0, -0.0784000015258789, 0.04130518503664735 }, { 0.0, -0.0784000015258789, 0.022552633649557112 },
            { 0.0, -0.0784000015258789, 0.012313739402931371 }, { 0.0, -0.0784000015258789, 0.00672330249492978 }
        };
    }

    SECTION("sneak big step down")
    {
        section = "sneak big step down";
        local_player->SetYaw(90.0f);
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false, true, false },
            { 1.0f, 0.0f, false,  true, false }, { 0.0f, 0.0f, false,  true, false }, { 0.0f, 0.0f, false, true, false },
            { 0.0f, 0.0f, false,  true, false }, { 0.0f, 0.0f, false,  true, false }, { 0.0f, 0.0f, false, true, false },
            { 0.0f, 0.0f, false,  true, false }
        };
        target_pos = {
            { 1.5, 1.0, 1.5 }, { 1.4019999966323375, 1.0, 1.5 }, { 1.2504919852108358, 1.0, 1.5 },
            { 1.138368597971673, 1.0, 1.5 }, { 1.0477492180338137, 1.0, 1.5 }, { 0.9688710274462369, 1.0, 1.5 },
            { 0.8964035269885322, 1.0, 1.5 }, { 0.8274362637482997, 1.0, 1.5 }, { 0.7603801302507898, 1.0, 1.5 },
            { 0.7443674737140089, 1.0, 1.5 }, { 0.728924555663963, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 }, { 0.7137927148638066, 1.0, 1.5 },
            { 0.7032519863109439, 1.0, 1.5 }, { 0.7032519863109439, 1.0, 1.5 }, { 0.7001096257476918, 1.0, 1.5 },
            { 0.7001096257476918, 1.0, 1.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { -0.053508008053839436, -0.0784000015258789, 0.0 },
            { -0.08272338384467842, -0.0784000015258789, 0.0 }, { -0.061219376543374435, -0.0784000015258789, 0.0 },
            { -0.049478187193092465, -0.0784000015258789, 0.0 }, { -0.04306749706322001, -0.0784000015258789, 0.0 },
            { -0.039567259845747896, -0.0784000015258789, 0.0 }, { -0.03765613010302538, -0.0784000015258789, 0.0 },
            { -0.036612653142296295, -0.0784000015258789, 0.0 }, { -0.03604291465556159, -0.0784000015258789, 0.0 },
            { -0.035731837405672005, -0.0784000015258789, 0.0 }, { -0.03556198920750398, -0.0784000015258789, 0.0 },
            { -0.03546925208053257, -0.0784000015258789, 0.0 }, { -0.035418617603324855, -0.0784000015258789, 0.0 },
            { -0.035390971175558235, -0.0784000015258789, 0.0 }, { -0.03537587622424434, -0.0784000015258789, 0.0 },
            { -0.03536763437986965, -0.0784000015258789, 0.0 }, { -0.03536313433231837, -0.0784000015258789, 0.0 },
            { -0.03536067730606999, -0.0784000015258789, 0.0 }, { -0.03535933576958254, -0.0784000015258789, 0.0 },
            { -0.03535860329057532, -0.0784000015258789, 0.0 }, { -0.03535820335699093, -0.0784000015258789, 0.0 },
            { -0.03535798499322848, -0.0784000015258789, 0.0 }, { -0.03535786576660034, -0.0784000015258789, 0.0 },
            { -0.035357800668853814, -0.0784000015258789, 0.0 }, { -0.019305361407562636, -0.0784000015258789, 0.0 },
            { -0.010540728552862517, -0.0784000015258789, 0.0 }, { -0.005755238458349004, -0.0784000015258789, 0.0 },
            { -0.0031423605632519926, -0.0784000015258789, 0.0 }, { -0.0017157290668220273, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }
        };
    }

    SECTION("step up crouching")
    {
        section = "step up crouching";
        local_player->SetYaw(180.0f);
        inputs = {
            { 0.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false, false, false },
            { 1.0f, 0.0f, false, false, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false },
            { 1.0f, 0.0f, false,  true, false }, { 1.0f, 0.0f, false,  true, false }
        };
        target_pos = {
            { 1.5, 1.0, 1.5 }, { 1.5, 1.0, 1.4019999966323375 }, { 1.5, 1.0, 1.300000011920929 },
            { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 },
            { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 },
            { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 },
            { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.0, 1.300000011920929 }, { 1.5, 1.25, 1.2706000085264435 },
            { 1.5, 1.25, 1.2251476014140419 }, { 1.5, 1.25, 1.1709305808536232 }, { 1.5, 1.25, 1.1119280807947423 },
            { 1.5, 1.25, 1.05031270862621 }, { 1.5, 1.25, 0.9872707081201 }, { 1.5, 1.25, 0.9234497684511975 },
            { 1.5, 1.25, 0.8592035279500099 }, { 1.5, 1.25, 0.794725073167422 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, -0.053508008053839436 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, -0.016052403717917444 }, { 0.0, -0.0784000015258789, -0.024817017165933247 },
            { 0.0, -0.0784000015258789, -0.0296024966643959 }, { 0.0, -0.0784000015258789, -0.032215368774048465 },
            { 0.0, -0.0784000015258789, -0.033641997111625396 }, { 0.0, -0.0784000015258789, -0.03442093627441823 },
            { 0.0, -0.0784000015258789, -0.034846237106702926 }, { 0.0, -0.0784000015258789, -0.03507845138810267 },
            { 0.0, -0.0784000015258789, -0.035205240400473806 }
        };
    }

    SECTION("back and forth soul sand")
    {
        section = "back and forth soul sand";
        local_player->SetYaw(270.0f);
        inputs = {
            {  0.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false },
            {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false },
            {  1.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false },
            {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false },
            {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false }, {  1.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false }, {  0.0f, 0.0f, false, false, false },
            {  0.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false }, { -1.0f, 0.0f, false, false, false },
            { -1.0f, 0.0f, false, false, false }
        };
        target_pos = {
            { 1.5, 1.0, 1.5 }, { 1.5980000033676625, 1.0, 1.5 }, { 1.7495080147891642, 1.0, 1.5 },
            { 1.930231402001505, 1.0, 1.5 }, { 2.1269063862484643, 1.0, 1.5 }, { 2.3322909434879646, 1.0, 1.5 },
            { 2.542430928133747, 0.9215999984741212, 1.5 }, { 2.5883255067950444, 0.875, 1.5 }, { 2.6050311341581427, 0.875, 1.5 },
            { 2.608679643652394, 0.875, 1.5 }, { 2.608679643652394, 0.875, 1.5 }, { 2.608679643652394, 0.875, 1.5 },
            { 2.608679643652394, 0.875, 1.5 }, { 2.608679643652394, 0.875, 1.5 }, { 2.608679643652394, 0.875, 1.5 },
            { 2.5106796402847316, 0.875, 1.5 }, { 2.391276433376601, 0.875, 1.5 }, { 2.2671987662026263, 1.0, 1.5 },
            { 2.1014523486890493, 1.0, 1.5 }, { 1.9129547908474454, 1.0, 1.5 }, { 1.7120351089438763, 1.0, 1.5 },
            { 1.5043329465146709, 1.0, 1.5 }, { 1.2929275492883274, 1.0, 1.5 }, { 1.1775001889955528, 1.0, 1.5 },
            { 1.1144768429553702, 1.0, 1.5 }, { 1.080066092020532, 1.0, 1.5 }, { 1.0612778198278034, 1.0, 1.5 },
            { 1.0510194220190332, 1.0, 1.5 }, { 1.1434183395325261, 1.0, 1.5 }, { 1.2918681577224342, 1.0, 1.5 },
            { 1.4709217712363767, 1.0, 1.5 }, { 1.6666850589381141, 1.0, 1.5 }, { 1.8715718298061041, 1.0, 1.5 },
            { 2.0814400230614734, 1.0, 1.5 }, { 2.2940280732562703, 1.0, 1.5 }, { 2.5081011655124863, 1.0, 1.5 },
            { 2.6249850874607548, 0.9215999984741212, 1.5 }, { 2.6505125393597257, 0.875, 1.5 }, { 2.6598045322572066, 0.875, 1.5 },
            { 2.6598045322572066, 0.875, 1.5 }, { 2.561804528889544, 0.875, 1.5 }, { 2.4424013219814134, 0.875, 1.5 },
            { 2.318323654807439, 0.875, 1.5 }
        };
        target_speed = {
            { 0.0, -0.0784000015258789, 0.0 }, { 0.053508008053839436, -0.0784000015258789, 0.0 },
            { 0.08272338384467842, -0.0784000015258789, 0.0 }, { 0.09867498087929642, -0.0784000015258789, 0.0 },
            { 0.10738455387183765, -0.0784000015258789, 0.0 }, { 0.11213998127812054, -0.0784000015258789, 0.0 },
            { 0.045894578661297335, -0.1552320045166016, 0.0 }, { 0.01670562736309876, -0.0784000015258789, 0.0 },
            { 0.0036485094942517544, -0.0784000015258789, 0.0 }, { 0.0007968345779727721, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { 0.0, -0.0784000015258789, 0.0 }, { -0.021403203540468353, -0.0784000015258789, 0.0 },
            { -0.02607766380631236, -0.0784000015258789, 0.0 }, { -0.06774641414591427, -0.0784000015258789, 0.0 },
            { -0.09049755447394163, -0.0784000015258789, 0.0 }, { -0.10291967853590693, -0.0784000015258789, 0.0 },
            { -0.10970215906154292, -0.0784000015258789, 0.0 }, { -0.1134053938586806, -0.0784000015258789, 0.0 },
            { -0.1154273602927745, -0.0784000015258789, 0.0 }, { -0.06302334604018213, -0.0784000015258789, 0.0 },
            { -0.03441075093483858, -0.0784000015258789, 0.0 }, { -0.018788272192729046, -0.0784000015258789, 0.0 },
            { -0.01025839780876992, -0.0784000015258789, 0.0 }, { -0.005601085854169216, -0.0784000015258789, 0.0 },
            { 0.050449814822245864, -0.0784000015258789, 0.0 }, { 0.08105361014627974, -0.0784000015258789, 0.0 },
            { 0.0977632843340748, -0.0784000015258789, 0.0 }, { 0.10688676750032744, -0.0784000015258789, 0.0 },
            { 0.11186818988770668, -0.0784000015258789, 0.0 }, { 0.11458804682713429, -0.0784000015258789, 0.0 },
            { 0.1160730888885533, -0.0784000015258789, 0.0 }, { 0.11688392194826847, -0.0784000015258789, 0.0 },
            { 0.025527451898971074, -0.1552320045166016, 0.0 }, { 0.009291992897480582, -0.0784000015258789, 0.0 },
            { 0.002029371514766581, -0.0784000015258789, 0.0 }, { 0.0, -0.0784000015258789, 0.0 },
            { -0.021403203540468353, -0.0784000015258789, 0.0 }, { -0.02607766380631236, -0.0784000015258789, 0.0 },
            { -0.027098566062165805, -0.0784000015258789, 0.0 }
        };
    }

    for (size_t i = 0; i < target_pos.size(); ++i)
    {
        target_pos[i] += test_offset;
    }

    // First record all positions and speed
    std::vector<Vector3<double>> positions(inputs.size());
    std::vector<Vector3<double>> speeds(inputs.size());

    // Make sure we are "just after a tick" to reduce the risk of any desync issue
    local_player->SetInputsJump(false);
    CHECK(Utilities::WaitForCondition([&]() -> bool
        {
            return !local_player->GetDirtyInputs();
        }, 150));
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        local_player->SetInputs(inputs[i]);
        CHECK(Utilities::WaitForCondition([&]() -> bool
            {
                return !local_player->GetDirtyInputs();
            }, 150));
        positions[i] = local_player->GetPosition();
        speeds[i] = local_player->GetSpeed();
    }

    // Then compare them to the targets
    for (size_t i = 0; i < inputs.size(); ++i)
    {
        INFO(section);
        INFO("Tick " << i);
        INFO("Position " << positions[i] << " | Target: " << target_pos[i]);
        INFO("Speed " << speeds[i] << " | Target: " << target_speed[i]);
        REQUIRE_THAT(std::sqrt((target_pos[i] - positions[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
        REQUIRE_THAT(std::sqrt((target_speed[i] - speeds[i]).SqrNorm()), Catch::Matchers::WithinAbs(0.0, 1e-6));
    }
}

TEST_CASE("collisions")
{
    std::unique_ptr<ManagersClient> bot = SetupTestBot(Vector3<double>(2.5, 1.51, 2.5));

    std::vector<std::tuple<std::string, float, float, float, Vector3<double>>> directions = {
        {"south", 0.0f, 1.0f, 0.0f, Vector3<double>(0.0, 0.0, 1.0)},
        {"north", 0.0f, -1.0f, 0.0f, Vector3<double>(0.0, 0.0, -1.0)},
        {"east", 0.0f, 0.0f, 1.0f, Vector3<double>(1.0, 0.0, 0.0)},
        {"west", 0.0f, 0.0f, -1.0f, Vector3<double>(-1.0, 0.0, 0.0)},
        {"south facing east", -90.0f, 0.0f, -1.0f, Vector3<double>(0.0, 0.0, 1.0)},
        {"north facing east", -90.0f, 0.0f, 1.0f, Vector3<double>(0.0, 0.0, -1.0)},
        {"east facing east", -90.0f, 1.0f, 0.0f, Vector3<double>(1.0, 0.0, 0.0)},
        {"west facing east", -90.0f, -1.0f, 0.0f, Vector3<double>(-1.0, 0.0, 0.0)},
    };

    std::shared_ptr<LocalPlayer> local_player = bot->GetLocalPlayer();
    // Wait the bot to be on ground
    Utilities::WaitForCondition([&]()
        {
            return local_player->GetY() - TestManager::GetInstance().GetCurrentOffset().y < 1.2 && local_player->GetOnGround();
        }, 5000);
    const Vector3<double> init_position = local_player->GetPosition();
    for (size_t i = 0; i < directions.size(); ++i)
    {
        SECTION(std::get<0>(directions[i]))
        {
            local_player->SetYaw(std::get<1>(directions[i]));
            // Walk in the given direction for 30 ticks (1.5s)
            for (size_t j = 0; j < 30; ++j)
            {
                local_player->SetInputsForward(std::get<2>(directions[i]));
                local_player->SetInputsLeft(std::get<3>(directions[i]));
                Utilities::WaitForCondition([&local_player]() -> bool
                    {
                        return !local_player->GetDirtyInputs();
                    }, 100);
            }
            // Check the wall stopped the walk
            CHECK(local_player->GetPosition().SqrDist(init_position + std::get<4>(directions[i]) * 1.2) < 0.2);
        }
    }
}
